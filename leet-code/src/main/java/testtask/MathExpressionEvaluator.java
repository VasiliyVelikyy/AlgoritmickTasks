package testtask;


import java.util.Scanner;
import java.util.Stack;

/*
* А минусы будут?
Нет ответа
27 апр. 21:10
Ограничение времени	1 секунда
Ограничение памяти	256 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
В далёкой галактике, на планете Разделяндия, жители одержимы математическими выражениями. Однако их выражения для нас кажутся слишком простыми, и всегда стоит вопрос: «А минусы будут?».

Вам дана строка S SS, представляющая собой математическое выражение, содержащее целые числа, операции сложения «+» и вычитания «-», а также скобки «(» и «)» для определения порядка операций. Сами числа, операторы и скобки могут быть разделены пробелами.

Ваша задача — ответить жителям Разделяндии, вычислив итоговое значение их выражения.

Гарантируется, что:

Строка содержит только допустимые символы: цифры, пробелы, операторы «+» и «-», а также круглые скобки «(» и «)».

Строка корректно сбалансирована по скобкам (каждая открывающая скобка имеет соответствующую закрывающую).

Пустых скобок нет (вида «()»).

Все числа во входной строке – целые числа, и их значения входят в 32-битный целочисленный диапазон.

Результат вычисления выражения входит в 64-битный целочисленный диапазон.

Формат ввода
Единственная строка S SS (1 ≤ ∣ S ∣ ≤ 1 0^ 6
 ) содержит в себе математическое выражение, которое необходимо вычислить.

Формат вывода
Одно целое число – результат вычисления выражения.

Пример 1
Ввод	Вывод
-123 + 23
-100
Пример 2
Ввод	Вывод
-((5 -2) - (3) +2) + 1
-1
Пример 3
Ввод	Вывод
(1 + -2) + (3-4 - (5-6 - 7)) +8
14
Пример 4
Ввод	Вывод
--42
42
Примечания
Обратите внимание, что ваше решение должно корректно обрабатывать выражения с неявно указанными операциями. Например, если перед скобками стоит знак «-», он должен применяться ко всему подвыражению внутри скобок.

Также необходимо учесть корректный приоритет операций и правильную работу с отрицательными числами.

* Пример 1
Ввод	Вывод
-123 + 23
-100
Пример 2
Ввод	Вывод
-((5 -2) - (3) +2) + 1
-1
Пример 3
Ввод	Вывод
(1 + -2) + (3-4 - (5-6 - 7)) +8
14
Пример 4
Ввод	Вывод
--42
42
Примечания
Обратите внимание, что ваше решение должно корректно обрабатывать выражения с неявно указанными операциями. Например, если перед скобками стоит знак «-», он должен применяться ко всему подвыражению внутри скобок.

Также необходимо учесть корректный приоритет операций и правильную работу с отрицательными числами.
* */
public class MathExpressionEvaluator {
    public static void main(String[] args) {
        MathExpressionEvaluator solution=new MathExpressionEvaluator();
        String expression=solution.enterExpression();
        long answer=solution.evaluate(expression);
        System.out.println(answer);
    }

    public long evaluate(String s) {
        s = s.replaceAll("\\s+", "");
        Stack<Long> stack = new Stack<>();
        long result = 0;
        long currentNumber = 0;
        long sign = 1;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (Character.isDigit(c)) {

                currentNumber = currentNumber * 10 + (c - '0');
            } else {
                if (c == '+' || c == '-') {
                    result += sign * currentNumber;
                    currentNumber = 0;

                    int newSign = (c == '+') ? 1 : -1;
                    while (i + 1 < s.length() && (s.charAt(i + 1) == '+' || s.charAt(i + 1) == '-')) {
                        char nextOp = s.charAt(i + 1);
                        newSign *= (nextOp == '+') ? 1 : -1;
                        i++;
                    }
                    sign = newSign;
                } else if (c == '(') {
                    stack.push(result);
                    stack.push(sign);
                    result = 0;
                    sign = 1;
                } else if (c == ')') {
                    result += sign * currentNumber;
                    currentNumber = 0;

                    result *= stack.pop();

                    result += stack.pop();
                }
            }
        }

        result += sign * currentNumber;

        return result;
    }

    private String enterExpression() {
        Scanner scanner = new Scanner(System.in);
        String answ= scanner.nextLine();
        scanner.close();
        return answ;
    }
}
